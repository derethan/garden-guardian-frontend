import{c as A,q as C,o as q}from"./index-DZdXfw6U.js";const O=()=>{const n="https://api.gardenguardian.app:8443/",{user:o,token:c}=A(),{gardenPlants:P,gardenGroups:G,setGardens:g,setGardenGroups:y,setGardenPlants:u}=C(),{postData:f}=q(),i={error:"There was an Error with your Request",delete:"Deleted Successfully"},$=async()=>{Promise.all([d(),p(),l()]).then(([e,t,r])=>{g(e),y(t),u(r)}).catch(e=>console.error("Error fetching data:",e))},m=async e=>{const t={...e,userID:o.id};try{const r=await f(n+`users/${o.id}/gardens`,t);return r.status?(d().then(s=>{g(s)}),r.message):i.error}catch(r){console.error("Error connecting to the server",r)}},d=async()=>{try{const e=await fetch(n+`users/${o.id}/gardens`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`}}),t=await e.json();if(e.status)return t.gardenData}catch(e){console.error("Error fetching gardens",e)}},j=async e=>{const t=G.filter(r=>r.gardenID===e).map(r=>w(r.groupID));Promise.all(t).then(r=>{console.log("All Groups Deleted",r)});try{const r=await fetch(n+`users/${o.id}/gardens/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json",authorization:`Bearer ${c}`}}),s=await r.json();return r.status?(d().then(a=>{g(a)}),s.message):i.error}catch(r){console.error("Error connecting to the server",r)}},T=async e=>{try{const t=await f(n+`users/${o.id}/gardens/groups`,{formData:e});if(console.log("result",t),!t.status)return"error";p().then(r=>{y(r)})}catch(t){console.error("Error connecting to the server",t)}},p=async()=>{try{const e=await fetch(n+`users/${o.id}/gardens/groups`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`}}),t=await e.json();if(e.status)return t.gardenGroups}catch(e){console.error("Error fetching garden groups",e)}},w=async e=>{const t=P.filter(r=>r.groupID===e).map(r=>(console.log("plant",r),E(r.gardenPlantID)));Promise.all(t).then(r=>{console.log("All Plants Deleted",r)});try{const r=await fetch(n+`users/${o.id}/gardens/groups/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`}}),s=await r.json();return r.status?(p().then(a=>{y(a)}),s.message):i.error}catch(r){console.error("Error connecting to the server",r)}},D=async e=>{console.log("plantData",e);try{const t=await f(n+`users/${o.id}/gardens/plants`,e);return t.status?(l().then(r=>{u(r)}),t.message):i.error}catch(t){console.error("Error connecting to the server",t)}},l=async()=>{try{const e=await fetch(n+`users/${o.id}/gardens/plants`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`}}),t=await e.json();if(e.status)return t.gardenPlants}catch(e){console.error("Error fetching garden plants",e)}},E=async e=>{try{const t=await fetch(n+`users/${o.id}/gardens/plants/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`}}),r=await t.json();return console.log("response",r),t.status?(l().then(s=>{u(s)}),r.message):i.error}catch(t){console.error("Error connecting to the server",t)}};return{updateGardenData:$,createGarden:m,createGardenGroup:T,createGardenPlant:D,getGardens:d,getGardenGroups:p,getGardenPlants:l,deleteGarden:j,deleteGardenGroup:w,deleteGardenPlant:E,updatePlantAttributes:async(e,t,r)=>{try{const s=await fetch(n+`users/${o.id}/gardens/plants/${r.gardenPlantID}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`},body:JSON.stringify({formData:e,property:t,plantData:r})}),a=await s.json();return s.status&&l().then(h=>{u(h)}),a.message}catch(s){console.error("Error connecting to the server",s)}},getAllPlants:async()=>{try{return await(await fetch(n+"api/plants")).json()}catch(e){console.error("Error:",e)}},getVariety:async e=>{try{return await(await fetch(n+`api/plants/${e}/varieties`)).json()}catch(t){console.error("Error:",t)}},getPlantData:async(e,t)=>{const r=t?`api/plants/${e.id}/varieties/${t.id}`:`api/plants/${e.id}`;try{return await(await fetch(n+r)).json()}catch(s){console.error("Error:",s)}},getPlantDescription:async(e,t)=>{let r=t?e+", "+t:e;try{return await(await fetch(n+`ai/plants/${r}`)).json()}catch(s){console.error("Error:",s)}},getAIResults:async(e,t,r)=>{try{const s=await fetch(n+"ai/generatePlantInfo",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({plantName:e||null,varietyName:t||null,plantProperties:r.map(h=>({title:h.title,description:h.description}))})});return s.status===400?null:await s.json()}catch(s){console.error("Error:",s)}},addNewPlant:async e=>{try{const t=await fetch(n+"api/plants",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r=await t.json();return r.status=t.status,r}catch(t){console.error("Error:",t)}}}};export{O as u};
